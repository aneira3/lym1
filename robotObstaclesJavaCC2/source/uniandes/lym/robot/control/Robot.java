/* Generated By:JavaCC: Do not edit this line. Robot.java */
package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import uniandes.lym.robot.view.Console;

import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;

@SuppressWarnings("serial")
public class Robot implements RobotConstants {



        private RobotWorldDec world;


        void setWorld(RobotWorld w) {
                world = (RobotWorldDec) w;
        }

        String salida=new String();

        public void revertirDireccion(int FacingInicial) {
          int FacingActual = world.getFacing();
          while (FacingActual != FacingInicial) {
                world.turnRight();
                FacingActual = world.getFacing();
         }
                }

        //boolean command(uniandes.lym.robot.view.Console sistema) :
  final public boolean command(Console sistema) throws ParseException {
                int x,y;
                salida=new String();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MOV:
    case RIGHT:
    case PUT:
    case PICK:
    case POP:
    case GO:
    case HOP:
    case JUMP:
    case WALK:
    case LEAP:
    case TURN:
    case TURNTO:
    case DROP:
    case GET:
    case GRAB:
    case LETGO:
    case NOP:
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RIGHT:
          jj_consume_token(RIGHT);
          jj_consume_token(42);
          jj_consume_token(43);
                                    world.turnRight();salida = "Command: Turnright";
          break;
        case MOV:
          jj_consume_token(MOV);
          jj_consume_token(42);
          x = num();
          jj_consume_token(43);
                                                world.moveForward(x,false);salida = "Command: Moveforward ";
          break;
        case HOP:
          jj_consume_token(HOP);
          jj_consume_token(42);
          x = num();
          jj_consume_token(43);
                                                world.moveForward(x,true);salida = "Command:Jumpforward ";
          break;
        case GO:
          jj_consume_token(GO);
          jj_consume_token(42);
          x = num();
          jj_consume_token(44);
          y = num();
          jj_consume_token(43);
                                                          world.setPostion(x,y);salida = "Command:GO ";
          break;
        case PUT:
          jj_consume_token(PUT);
          jj_consume_token(42);
          put();
          jj_consume_token(43);
          break;
        case PICK:
          jj_consume_token(PICK);
          jj_consume_token(42);
          get();
          jj_consume_token(43);
          break;
        case POP:
          jj_consume_token(POP);
          jj_consume_token(42);
          x = num();
          jj_consume_token(43);
                                        world.popBalloons(x); salida = "Comando:  Pop";
          break;
        case JUMP:
          jj_consume_token(JUMP);
          jj_consume_token(42);
          x = num();
          jj_consume_token(44);
          y = num();
          jj_consume_token(43);
                                                     world.setPostion(x,y); salida = "Comando:  JUMP";
          break;
        case WALK:
          jj_consume_token(WALK);
          jj_consume_token(42);
          walk();
          jj_consume_token(43);
                                       salida = "Comando: WALK";
          break;
        case LEAP:
          jj_consume_token(LEAP);
          jj_consume_token(42);
          leap();
          jj_consume_token(43);
                                       salida = "Comando: LEAP";
          break;
        case TURN:
          jj_consume_token(TURN);
          jj_consume_token(42);
          direccion();
          jj_consume_token(43);
                                            salida = "Comando: TURN";
          break;
        case TURNTO:
          jj_consume_token(TURNTO);
          jj_consume_token(42);
          cardinal();
          jj_consume_token(43);
                                             salida = "Comando: TURNTO";
          break;
        case DROP:
          jj_consume_token(DROP);
          jj_consume_token(42);
          x = num();
          jj_consume_token(43);
                                          world.putChips(x);salida = "Comando: DROP";
          break;
        case GET:
          jj_consume_token(GET);
          jj_consume_token(42);
          x = num();
          jj_consume_token(43);
                                         world.pickChips(x);salida = "Comando: GET";
          break;
        case GRAB:
          jj_consume_token(GRAB);
          jj_consume_token(42);
          x = num();
          jj_consume_token(43);
                                          world.grabBalloons(x);salida = "Comando: GRAB";
          break;
        case LETGO:
          jj_consume_token(LETGO);
          jj_consume_token(42);
          x = num();
          jj_consume_token(43);
                                           world.putBalloons(x);salida = "Comando: LETGO";
          break;
        case NOP:
          jj_consume_token(NOP);
          jj_consume_token(42);
          jj_consume_token(43);
                                salida = "Comando: NOP";
          break;
        default:
          jj_la1[0] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(45);
                    try {
                                 Thread.sleep(900);
                    } catch (InterruptedException e) {
                                        System.err.format("IOException: %s%n", e);
                            }

                        sistema.printOutput(salida);
                        {if (true) return true;}
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MOV:
        case RIGHT:
        case PUT:
        case PICK:
        case POP:
        case GO:
        case HOP:
        case JUMP:
        case WALK:
        case LEAP:
        case TURN:
        case TURNTO:
        case DROP:
        case GET:
        case GRAB:
        case LETGO:
        case NOP:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_1;
        }
      }
      break;
    case 0:
      jj_consume_token(0);
                 {if (true) return false;}
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void comando() throws ParseException {
    jj_consume_token(IF);
  }

  final public void put() throws ParseException {
                int f=1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CHIPS:
      jj_consume_token(CHIPS);
      jj_consume_token(44);
      f = num();
                                          world.putChips(f); salida = "Command:  Put Chips";
      break;
    case BALLOONS:
      jj_consume_token(BALLOONS);
      jj_consume_token(44);
      f = num();
                                                      world.putBalloons(f); salida = "Command:  Put Balloons";
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void get() throws ParseException {
                int f=1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CHIPS:
      jj_consume_token(CHIPS);
      jj_consume_token(44);
      f = num();
                                         world.pickChips(f);salida = "Command:  Pick chips";
      break;
    case BALLOONS:
      jj_consume_token(BALLOONS);
      jj_consume_token(44);
      f = num();
                                                      world.grabBalloons(f);salida="Command:  Pick balloons";
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void walk() throws ParseException {
                int f=1;
                boolean esDireccion = false;
                int FacingInicial = world.getFacing();
    f = num();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 44:
      jj_consume_token(44);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RIGHT:
      case FRONT:
      case LEFT:
      case BACK:
      case AROUND:
        direccion();
                                             esDireccion = true;
        break;
      case EAST:
      case WEST:
      case NORTH:
      case SOUTH:
        cardinal();
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
                                                                                       try { world.moveForward(f,false);salida = "Command: WALK "; } finally { if (esDireccion) { revertirDireccion(FacingInicial); } }
  }

  final public void leap() throws ParseException {
                int f=1;
                boolean esDireccion = false;
                int FacingInicial = world.getFacing();
    f = num();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 44:
      jj_consume_token(44);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RIGHT:
      case FRONT:
      case LEFT:
      case BACK:
      case AROUND:
        direccion();
                                             esDireccion = true;
        break;
      case EAST:
      case WEST:
      case NORTH:
      case SOUTH:
        cardinal();
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
                                                                                       try { world.moveForward(f,true);salida = "Command: WALK "; } finally { if (esDireccion) { revertirDireccion(FacingInicial); } }
  }

  final public void condicion_if() throws ParseException {
    jj_consume_token(IF);
  }

        /**
	 * Unsigned decimal number
	 * @return the corresponding value of the string
	 * @error  corresponding value is too large
	 */
  final public int num() throws ParseException, Error {
                int total=1;
    jj_consume_token(NUM);
                        try
                        {
                                total = Integer.parseInt(token.image);
                        }
                        catch (NumberFormatException ee)
                        {
                                {if (true) throw new Error("Number out of bounds: "+token.image+" !!");}
                        }
                        {if (true) return total;}
    throw new Error("Missing return statement in function");
  }

  final public void direccion() throws ParseException, Error {
          String valor = "";
          int total = 1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RIGHT:
      jj_consume_token(RIGHT);
      break;
    case LEFT:
      jj_consume_token(LEFT);
      break;
    case FRONT:
      jj_consume_token(FRONT);
      break;
    case BACK:
      jj_consume_token(BACK);
      break;
    case AROUND:
      jj_consume_token(AROUND);
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                  valor = token.image;
                  valor = valor.toLowerCase();
                  if (valor.equals("right")) {
                        world.turnRight();
                  }
                  else if (valor.equals("around")) {
                    world.turnRight();
                    world.turnRight();

                  }

                  else if (valor.equals("back")) {
                    world.turnRight();
                    world.turnRight();
                  }

                  else if (valor.equals("left")) {
                    world.turnRight();
                    world.turnRight();
                    world.turnRight();
                  }
  }

  final public void cardinal() throws ParseException {
        int FacingActual = world.getFacing();
    int FacingObjetivo = 0;
    String valor;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NORTH:
      jj_consume_token(NORTH);
      break;
    case SOUTH:
      jj_consume_token(SOUTH);
      break;
    case EAST:
      jj_consume_token(EAST);
      break;
    case WEST:
      jj_consume_token(WEST);
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          valor = token.image;
          valor = valor.toLowerCase();
          if (valor.equals("north")) {
                        FacingObjetivo = 0;
                  }
          else if (valor.equals("south")) {
                    FacingObjetivo = 1;
                  }

          else if (valor.equals("east")) {
                   FacingObjetivo = 2;
                  }

          else if (valor.equals("west")) {
                    FacingObjetivo = 3;
                  }
          while (FacingActual != FacingObjetivo) {
            world.turnRight();
            FacingActual = world.getFacing();
          }
  }

  /** Generated Token Manager. */
  public RobotTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[11];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x3fffe0,0x3fffe0,0x3fffe1,0xc00000,0xc00000,0x40,0x0,0x40,0x0,0x40,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x3fc,0x1000,0x3fc,0x1000,0x3c0,0x3c,};
   }

  /** Constructor with InputStream. */
  public Robot(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Robot(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new RobotTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Robot(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new RobotTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Robot(RobotTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(RobotTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[46];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 11; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 46; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
