/*
Gramatica para el Robot:
Autor: Alejandro Arango
Modificado por: Silvia Takahashi
Modificado por: Juan Pablo Morales.
Agregadas producciones para manejar globos
Modificado por Silvia Takahashi


 **/


options 
{
  
	LOOKAHEAD=1; 
	IGNORE_CASE=true;
	STATIC = false;
	
}
   

PARSER_BEGIN(Robot)

package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import uniandes.lym.robot.view.Console;
 
import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;

@SuppressWarnings("serial")
public class Robot 
{
  


	private RobotWorldDec world;
	
	
	void setWorld(RobotWorld w) {
		world = (RobotWorldDec) w;	
	}

	String salida=new String();
	
	public void revertirDireccion(int FacingInicial) {
	  int FacingActual = world.getFacing();
	  while (FacingActual != FacingInicial) {
	  	world.turnRight();
	  	FacingActual = world.getFacing();
	 }
	 	}
	
}


	
PARSER_END(Robot)

SKIP:
{
	" "
	|	"\r"
	|	"\t"
	| "\n"
}

TOKEN: /* Nombres de Comandos */
{

			<MOV:  "Mov">
		| 	<RIGHT: "RIGHT">
		| 	<PUT: "Put">
		| 	<PICK: "Pick">
		|  < POP: "Pop" >
		|  <GO: "GO" >
        |  < HOP:  "HOP" >
        |  < JUMP:  "Jump" >
        |  < WALK:  "walk" >
        |  < LEAP:  "leap" >
        |  < TURN:  "Turn" >
        |  < TURNTO:  "TurnTo" >
        |  < DROP:  "Drop" >
        |  < GET:  "Get" >
        |  < GRAB:  "Grab" >
        |  < LETGO:  "LetGo" >
        |  < NOP:  "Nop" >
        
}

TOKEN:
{
		<BALLOONS:  "BALLOONS" >
		|	<CHIPS:     "CHIPS"  >	

}

//estructuras de control
TOKEN:
{
		<IF:  "if" >
		|	<ELSE:     "else"  >
		|  <WHILE: "while" >
		|  <REPEAT: "repeat" >
		|  <TIMES: "times" >
		|  <FACING: "facing" >
		|  <CAN: "can" >
		|  <NOT: "not" >

}



TOKEN :
{
		<NUM: (<DIGIT>)+ >
		|  	<#DIGIT: ["0"-"9"] >
        
}

TOKEN: /* Direcciones */
{

			<EAST:  "East">
		| 	<WEST: "West">
		| 	<NORTH: "North">
		| 	<SOUTH: "South">
		|  < FRONT: "Front" >
        |  < LEFT:  "Left" >
        |  < BACK:  "Back" >
        |  < AROUND:  "Around" >
}


	//boolean command(uniandes.lym.robot.view.Console sistema) :
	boolean command(Console sistema):
	{	
		
		int x,y;
		salida=new String();	
	}

	
	{
		(		  (
		   <RIGHT> "(" ")" {world.turnRight();salida = "Command: Turnright";}
		| 	<MOV>  "(" x=num() ")" {world.moveForward(x,false);salida = "Command: Moveforward ";}  
		| 	<HOP>  "(" x=num() ")" {world.moveForward(x,true);salida = "Command:Jumpforward ";}
		| 	<GO>  "(" x=num() "," y=num()")" {world.setPostion(x,y);salida = "Command:GO ";}  
		|  <PUT> "("  put() ")"					  			
		|  <PICK> "(" get()  ")"	
	    |  < POP > "(" x=num() ")" {world.popBalloons(x); salida = "Comando:  Pop";}
	    |  < JUMP > "(" x=num() "," y=num() ")" {world.setPostion(x,y); salida = "Comando:  JUMP";}
	    |  < WALK> "(" walk() ")" {salida = "Comando: WALK"; } 
	    |  < LEAP> "(" leap() ")" {salida = "Comando: LEAP"; } 
	    |  < TURN> "(" direccion() ")" {salida = "Comando: TURN"; } 
	    |  < TURNTO> "(" cardinal() ")" {salida = "Comando: TURNTO"; }
	    |  < DROP> "(" x = num() ")" {world.putChips(x);salida = "Comando: DROP"; }
	    |  < GET> "(" x = num() ")" {world.pickChips(x);salida = "Comando: GET"; }
	    |  < GRAB> "(" x = num() ")" {world.grabBalloons(x);salida = "Comando: GRAB"; }
	    |  < LETGO> "(" x = num() ")" {world.putBalloons(x);salida = "Comando: LETGO"; }
	    |  < NOP> "(" ")" { salida = "Comando: NOP"; }
		) ";" 

		{
		    try {
	    			 Thread.sleep(900);
	    	    } catch (InterruptedException e) {
	    			        System.err.format("IOException: %s%n", e);
	    		    }
	    			 
			sistema.printOutput(salida);
			return true;
		})+

    	| <EOF> {return false;} 
	}

	void comando():
	{ }
	{
	  < IF>
	}

	void put() :
	{
		int f=1;	
	}
	{
		( <CHIPS>    "," f=num() {world.putChips(f); salida = "Command:  Put Chips"; })
		|  	  ( <BALLOONS>   "," f=num() {world.putBalloons(f); salida = "Command:  Put Balloons";})	 

	}

	void get() :
	{
		int f=1;	
	}
	{
		( <CHIPS>   "," f=num() {world.pickChips(f);salida = "Command:  Pick chips";})
		|  	  ( <BALLOONS>   "," f=num() {world.grabBalloons(f);salida="Command:  Pick balloons";})	 

	}


	void walk():
	{
		int f=1;
		boolean esDireccion = false;
		int FacingInicial = world.getFacing();
		
	  }
	 {
	    (f=num()  ("," (( direccion()) { esDireccion = true; }|( cardinal())))?) { try { world.moveForward(f,false);salida = "Command: WALK "; } finally { if (esDireccion) { revertirDireccion(FacingInicial); } } } 
	 }
	  

	void leap():
	{
		int f=1;
		boolean esDireccion = false;
		int FacingInicial = world.getFacing();
		
	  }
	 {
	    (f=num()  ("," (( direccion()) { esDireccion = true; }|( cardinal())))?) { try { world.moveForward(f,true);salida = "Command: WALK "; } finally { if (esDireccion) { revertirDireccion(FacingInicial); } } } 
	 }


	  void condicion_if():
	  { }
	  {< IF>  }
	
	

	/**
	 * Unsigned decimal number
	 * @return the corresponding value of the string
	 * @error  corresponding value is too large
	 */

	int num() throws Error:
	{	
		int total=1;
	}
	{
		<NUM>
		{
			try 
			{
				total = Integer.parseInt(token.image);
			} 
			catch (NumberFormatException ee) 
			{
				throw new Error("Number out of bounds: "+token.image+" !!");
			}
			return total;
		}
	}

	
	void direccion() throws Error:
	{
	  String valor = "";
	  int total = 1;
	}
	{
		(< RIGHT>|< LEFT>|< FRONT>|< BACK>|< AROUND>) {
		  valor = token.image;
		  valor = valor.toLowerCase();
		  if (valor.equals("right")) { 
		  	world.turnRight();
		  }
 		  else if (valor.equals("around")) {
		    world.turnRight();
		    world.turnRight();
		    
		  }
		  
		  else if (valor.equals("back")) {
		    world.turnRight();
		    world.turnRight();
		  }
		 
		  else if (valor.equals("left")) {
		    world.turnRight();
		    world.turnRight();
		    world.turnRight();
		  }
		  

		  }
	}

	void cardinal():
	{
	int FacingActual = world.getFacing();
    int FacingObjetivo = 0;
    String valor;
	}
	{
		(<NORTH>|< SOUTH>|< EAST>| < WEST>)
	
	{
	  valor = token.image;
	  valor = valor.toLowerCase();
	  if (valor.equals("north")) { 
		  	FacingObjetivo = 0;
		  }
 	  else if (valor.equals("south")) {
		    FacingObjetivo = 1;
		  }
		  
	  else if (valor.equals("east")) {
		   FacingObjetivo = 2;
		  }
		 
	  else if (valor.equals("west")) {
		    FacingObjetivo = 3;
		  }
	  while (FacingActual != FacingObjetivo) {
	    world.turnRight();
	    FacingActual = world.getFacing();
	  }
	
	}
}
  

	

